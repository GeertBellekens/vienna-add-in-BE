<#@ template language="C#v3.5" hostspecific="True" debug="True" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(SolutionDir)/UpccModel/bin/Debug/Upcc.dll" #>
<#@ assembly name="$(SolutionDir)/VIENNAAddInUtils/bin/Debug/VIENNAAddInUtils.dll" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="VIENNAAddInUtils"#>
<#@ import namespace="VIENNAAddInUtils.t4"#>
<#@ import namespace="Upcc"#>
// *******************************************************************************
// This file is part of the VIENNAAddIn project
// 
// Licensed under GNU General Public License V3 http://gplv3.fsf.org/
// 
// For further information on the VIENNAAddIn project please visit 
// http://vienna-add-in.googlecode.com
// *******************************************************************************
using System;
using System.Collections.Generic;
<#@ include file="t4/CctsRepositoryNamespaces.tt" #>
using VIENNAAddIn.upcc3.uml;
using VIENNAAddInUtils;

namespace VIENNAAddIn.upcc3.repo
{
    public class UpccRepository : ICctsRepository
    {
        public UpccRepository(IUmlRepository umlRepository)
        {
            UmlRepository = umlRepository;
        }
		
		public IUmlRepository UmlRepository { get; private set; }

        #region ICctsRepository Members

		#region Libraries
		
<#
	var allPackageStereotypes = new StringBuilder();
	var allPackages = new List<MetaPackage>(MetaModel.GetAllPackages());
	for (int i = 0; i < allPackages.Count; ++i)
	{
		if (i > 0)
		{
			allPackageStereotypes.Append(", ");
		}
		allPackageStereotypes.Append("\"");
		allPackageStereotypes.Append(allPackages[i].Stereotype);
		allPackageStereotypes.Append("\"");
	}
#>
		public IEnumerable<object> GetAllLibraries()
        {
            foreach (IUmlPackage umlPackage in UmlRepository.GetPackagesByStereotype(<#= allPackageStereotypes.ToString() #>))
            {
                switch (umlPackage.Stereotype)
                {
<#
	foreach (var package in MetaModel.GetAllPackages())
	{
#>
                    case "<#= package.Stereotype #>":
                        yield return new Upcc<#= package.Name #>(umlPackage);
                        break;
<#
	}
#>
                }
            }
        }
<#
	foreach (var package in MetaModel.GetAllPackages())
	{
#>

		/// <returns>
		/// All <#= package.Stereotype.ToString().Plural() #> contained in this repository.
		/// </returns>
        public IEnumerable<I<#= package.Name #>> Get<#= package.Name.Plural() #>()
        {
            foreach (IUmlPackage umlPackage in UmlRepository.GetPackagesByStereotype("<#= package.Stereotype.ToString() #>"))
            {
                yield return new Upcc<#= package.Name #>(umlPackage);
            }
        }

		/// <summary>
		/// Retrieves a <#= package.Stereotype #> by ID.
		/// <param name="id">A <#= package.Stereotype #>'s ID.</param>
		/// <returns>The <#= package.Stereotype #> with the given <paramref name="id"/> or <c>null</c> if no such <#= package.Stereotype #> is found.</returns>
		/// </summary>
		public I<#= package.Name #> Get<#= package.Name #>ById(int id)
		{
            var umlPackage = UmlRepository.GetPackageById(id);
            return umlPackage == null ? null : new Upcc<#= package.Name #>(umlPackage);
		}

		/// <summary>
		/// Retrieves a <#= package.Stereotype #> by <see cref="Path"/>.
		/// <param name="path">A <#= package.Stereotype #>'s <see cref="Path"/>.</param>
		/// <returns>The <#= package.Stereotype #> with the given <paramref name="path"/> or <c>null</c> if no such <#= package.Stereotype #> is found.</returns>
		/// </summary>
        public I<#= package.Name #> Get<#= package.Name #>ByPath(Path path)
		{
            var umlPackage = UmlRepository.GetPackageByPath(path);
            return umlPackage == null ? null : new Upcc<#= package.Name #>(umlPackage);
		}
<#
	}
#>

		#endregion
		
		#region Elements
<#
	foreach (var classifier in MetaModel.GetAllConcreteClassifiers())
	{
#>

		/// <summary>
		/// Retrieves a <#= classifier.Stereotype #> by ID.
		/// <param name="id">A <#= classifier.Stereotype #>'s ID.</param>
		/// <returns>The <#= classifier.Stereotype #> with the given <paramref name="id"/> or <c>null</c> if no such <#= classifier.Stereotype #> is found.</returns>
		/// </summary>
        public I<#= classifier.Name #> Get<#= classifier.Name #>ById(int id)
		{
            var umlClassifier = UmlRepository.Get<#= classifier.GetType().Name.Substring(4) #>ById(id);
            return umlClassifier == null ? null : new Upcc<#= classifier.Name #>(umlClassifier);
		}

		/// <summary>
		/// Retrieves a <#= classifier.Stereotype #> by <see cref="Path"/>.
		/// <param name="path">A <#= classifier.Stereotype #>'s <see cref="Path"/>.</param>
		/// <returns>The <#= classifier.Stereotype #> with the given <paramref name="path"/> or <c>null</c> if no such <#= classifier.Stereotype #> is found.</returns>
		/// </summary>
		public I<#= classifier.Name #> Get<#= classifier.Name #>ByPath(Path path)
		{
            var umlClassifier = UmlRepository.Get<#= classifier.GetType().Name.Substring(4) #>ByPath(path);
            return umlClassifier == null ? null : new Upcc<#= classifier.Name #>(umlClassifier);
		}
<#
	}
#>

		#endregion

        /// <summary>
        /// Root locations are places in the repository where root-level bLibraries can be created.
        /// </summary>
        /// <returns>The root locations currently available in this repository.</returns>
        public IEnumerable<Path> GetRootLocations()
        {
            return UmlRepository.GetRootLocations();
        }

        /// <summary>
        /// Creates a bLibrary in the given <paramref name="rootLocation"/>.
        /// </summary>
        /// <param name="rootLocation">A root location (<see cref="GetRootLocations"/>).</param>
        /// <param name="specification">A specification for a bLibrary.</param>
        /// <returns>The newly created bLibrary.</returns>
        /// <returns></returns>
        public IBLibrary CreateRootBLibrary(Path rootLocation, BLibrarySpec specification)
        {
            var umlPackage = UmlRepository.CreateRootPackage(rootLocation, BLibrarySpecConverter.Convert(specification));
            return umlPackage == null ? null : new UpccBLibrary(umlPackage);
        }

        #endregion
    }
}