<#@ assembly name="$(SolutionDir)/VIENNAAddInUtils/bin/Debug/VIENNAAddInUtils.dll" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="VIENNAAddInUtils"#>
<#@ import namespace="VIENNAAddInUtils.t4"#>
<#@ include file="../t4/CctsRepositoryNamespaces.tt" #>
using VIENNAAddIn.upcc3.uml;

<# 
	var specType = metaAssociation.ClassName + "Spec";
	var spec = specType.FirstCharToLowerCase();
	var umlSpec = "umlAssociationSpec";
#>
namespace VIENNAAddIn.upcc3.repo.<#= MetaModel.GetPackageRelationsFor(metaAssociation.AssociatingClassifierType).First().PackageType.Name #>
{
    internal static partial class <#= specType #>Converter
    {
		internal static UmlAssociationSpec Convert(<#= specType #> <#= spec #>, string associatingClassName)
		{
<#
///==========================================================================================================================
/// Associated classifier
///==========================================================================================================================

		if (metaAssociation.AssociatedClassifierType is MetaMultiType)
		{
			var multiType = (MetaMultiType) metaAssociation.AssociatedClassifierType;
#>
			IUmlClassifier associatedClassifierType;
			var multiType = <#= spec #>.Associated<#= metaAssociation.AssociatedClassifierType.Name #>;
<#
			foreach (var classifier in multiType.Classifiers)
			{
#>
            if (multiType.Is<#= classifier.Name #>)
            {
                associatedClassifierType = ((Upcc<#= classifier.Name #>) multiType.<#= classifier.Name #>).Uml<#= classifier.GetType().Name.Substring(4) #>;
			}
			else
<#
			}
#>
			{
				associatedClassifierType = null;
			}
<#
		}
		else
		{
#>
			var associatedClassifierType = ((Upcc<#= metaAssociation.AssociatedClassifierType.Name #>) <#= spec #>.Associated<#= metaAssociation.AssociatedClassifierType.Name #>).Uml<#= metaAssociation.AssociatedClassifierType.GetType().Name.Substring(4) #>;
<#
		}

///==========================================================================================================================
/// Create UML Spec
///==========================================================================================================================
#>
			var <#= umlSpec #> = new UmlAssociationSpec
				{
					Stereotype = "<#= metaAssociation.Stereotype.ToString() #>",
					Name = <#= spec #>.Name,
					UpperBound = <#= spec #>.UpperBound,
					LowerBound = <#= spec #>.LowerBound,
<#
		switch (metaAssociation.AggregationKind)
		{
			case MetaAggregationKind.Shared:
#>
					AggregationKind = AggregationKind.Shared,
<#
				break;
			case MetaAggregationKind.Composite:
#>
					AggregationKind = AggregationKind.Composite,
<#
				break;
			case MetaAggregationKind.SharedOrComposite:
#>
					AggregationKind = <#= spec #>.AggregationKind == AggregationKind.Shared ? AggregationKind.Shared : AggregationKind.Composite,
<#
				break;
		}
#>
					AssociatedClassifier = associatedClassifierType,
<#
///==========================================================================================================================
/// Tagged Values
///==========================================================================================================================
	
	if (metaAssociation.HasTaggedValues)
	{
#>
					TaggedValues = new[]
						{
<# 
		foreach (var metaTaggedValue in metaAssociation.TaggedValues)
		{
#>
							new UmlTaggedValueSpec("<#= metaTaggedValue.Name #>", <#= spec #>.<#= metaTaggedValue.AsPropertyName() #>) <# if (metaTaggedValue.AutoGenerated) { #>{ DefaultValue = Generate<#= metaTaggedValue.AsPropertyName() #>DefaultValue(<#= spec #>, associatingClassName) }<# } #>,
<#
		}
#>
						},
<#
	}
#>
				};

			return <#= umlSpec #>;
		}
	}
}
