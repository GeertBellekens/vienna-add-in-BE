<#@ assembly name="$(SolutionDir)/VIENNAAddInUtils/bin/Debug/VIENNAAddInUtils.dll" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="VIENNAAddInUtils"#>
<#@ import namespace="VIENNAAddInUtils.t4"#>
<#@ include file="../t4/CctsRepositoryNamespaces.tt" #>
using VIENNAAddIn.upcc3.uml;

<# 
	var specType = metaAttribute.ClassName + "Spec";
	var spec = specType.FirstCharToLowerCase();
	var umlSpec = "umlAttributeSpec";
#>
namespace VIENNAAddIn.upcc3.repo.<#= MetaModel.GetPackageRelationsFor(metaAttribute.ContainingClassifierType).First().PackageType.Name #>
{
    internal static partial class <#= specType #>Converter
    {
		internal static UmlAttributeSpec Convert(<#= specType #> <#= spec #>, string className)
		{
<#
///==========================================================================================================================
/// Attribute Type
///==========================================================================================================================

		if (metaAttribute.Type is MetaMultiType)
		{
			var multiType = (MetaMultiType) metaAttribute.Type;
#>
			IUmlClassifier type;
			var multiType = <#= spec #>.<#= metaAttribute.Type.Name #>;
<#
			foreach (var classifier in multiType.Classifiers)
			{
#>
            if (multiType.Is<#= classifier.Name #>)
            {
                type = ((Upcc<#= classifier.Name #>) multiType.<#= classifier.Name #>).Uml<#= classifier.GetType().Name.Substring(4) #>;
			}
			else
<#
			}
#>
			{
				type = null;
			}
<#
		}
		else
		{
#>
			var type = ((Upcc<#= metaAttribute.Type.Name #>) <#= spec #>.<#= metaAttribute.Type.Name #>).Uml<#= metaAttribute.Type.GetType().Name.Substring(4) #>;
<#
		}

///==========================================================================================================================
/// Create UML Spec
///==========================================================================================================================
#>
			var <#= umlSpec #> = new UmlAttributeSpec
				{
					Stereotype = "<#= metaAttribute.Stereotype.ToString() #>",
					Name = <#= spec #>.Name,
					Type = type,
					UpperBound = <#= spec #>.UpperBound,
					LowerBound = <#= spec #>.LowerBound,
<#
///==========================================================================================================================
/// Tagged Values
///==========================================================================================================================
	
	if (metaAttribute.HasTaggedValues)
	{
#>
					TaggedValues = new[]
						{
<# 
		foreach (var metaTaggedValue in metaAttribute.TaggedValues)
		{
#>
							new UmlTaggedValueSpec("<#= metaTaggedValue.Name #>", <#= spec #>.<#= metaTaggedValue.AsPropertyName() #>) <# if (metaTaggedValue.AutoGenerated) { #>{ DefaultValue = Generate<#= metaTaggedValue.AsPropertyName() #>DefaultValue(<#= spec #>, className) }<# } #>,
<#
		}
#>
						},
<#
	}
#>
	
				};

			return <#= umlSpec #>;
		}
	}
}
