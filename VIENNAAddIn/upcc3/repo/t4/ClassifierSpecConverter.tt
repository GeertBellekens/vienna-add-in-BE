<#@ assembly name="$(SolutionDir)/VIENNAAddInUtils/bin/Debug/VIENNAAddInUtils.dll" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="VIENNAAddInUtils"#>
<#@ import namespace="VIENNAAddInUtils.t4"#>
<#@ include file="../t4/CctsRepositoryNamespaces.tt" #>
using VIENNAAddIn.upcc3.uml;
using VIENNAAddIn.Utils;
using System.Collections.Generic;

<# 
	var classifierType = metaClassifier.Name;
	var specType = classifierType + "Spec";
	var spec = specType.FirstCharToLowerCase();
	var umlClassifierType = metaClassifier.GetType().Name.Substring(4);
	var umlSpecType = "Uml" + umlClassifierType + "Spec";
	var umlSpec = umlSpecType.FirstCharToLowerCase();
#>
namespace VIENNAAddIn.upcc3.repo.<#= MetaModel.GetPackageRelationsFor(metaClassifier).First().PackageType.Name #>
{
    internal static partial class <#= specType #>Converter
    {
		internal static <#= umlSpecType #> Convert(<#= specType #> <#= spec #>)
		{
			var <#= umlSpec #> = new <#= umlSpecType #>
				{
					Stereotype = "<#= metaClassifier.Stereotype.ToString() #>",
					Name = <#= spec #>.Name,
<#
///==========================================================================================================================
/// Tagged Values
///==========================================================================================================================
	
	if (metaClassifier.HasTaggedValues)
	{
#>
					TaggedValues = new[]
						{
<# 
		foreach (var metaTaggedValue in metaClassifier.TaggedValues)
		{
#>
							new UmlTaggedValueSpec("<#= metaTaggedValue.Name #>", <#= spec #>.<#= metaTaggedValue.AsPropertyName() #>) <# if (metaTaggedValue.AutoGenerated) { #>{ DefaultValue = Generate<#= metaTaggedValue.AsPropertyName() #>DefaultValue(<#= spec #>) }<# } #>,
<#
		}
#>
						},
<#
	}
#>
				};
<#
	
///==========================================================================================================================
/// Dependencies
///==========================================================================================================================
					
	if (MetaModel.HasDependencies(metaClassifier))
	{
#>

			var dependencySpecs = new List<UmlDependencySpec>();
<#
		foreach (var dependency in MetaModel.GetDependenciesFor(metaClassifier))
		{
			var dependencyStereotype = dependency.Stereotype.ToString();
			var dependencyProperty = dependency.Stereotype.ToString().FirstCharToUpperCase();
			var dependencyTargetType = dependency.TargetClassifierType.Name;
			var dependencyTargetUmlType = "Uml" + dependency.TargetClassifierType.GetType().Name.Substring(4);
#>
			if (<#= spec #>.<#= dependencyProperty #> != null)
			{
				dependencySpecs.Add(new UmlDependencySpec
									{
										Stereotype = "<#= dependencyStereotype #>",
										Target = ((Upcc<#= dependencyTargetType #>) <#= spec #>.<#= dependencyProperty #>).<#= dependencyTargetUmlType #>,
										LowerBound = "0",
										UpperBound = "1",
									});
			}
<#
		}
#>
			<#= umlSpec #>.Dependencies = dependencySpecs;
<#
	}
///==========================================================================================================================
/// Attributes
///==========================================================================================================================
					
	if (MetaModel.HasAttributes(metaClassifier))
	{
#>

			var attributeSpecs = new List<UmlAttributeSpec>();
<#
		foreach (var attribute in MetaModel.GetAttributesFor(metaClassifier))
		{
			var attributeSpecType = attribute.ClassName + "Spec";
			var attributeSpec = attributeSpecType.FirstCharToLowerCase();
			if (attribute.Cardinality == MetaCardinality.Many)
			{
#>
			if (<#= spec #>.<#= attribute.AttributeName #> != null)
			{
				foreach (var <#= attributeSpec #> in <#= spec #>.<#= attribute.AttributeName #>)
				{
					attributeSpecs.Add(<#= attributeSpecType #>Converter.Convert(<#= attributeSpec #>, <#= spec #>.Name));
				}
			}
<#
			}
			else
			{
#>
			if (<#= spec #>.<#= attribute.AttributeName #> != null)
			{
				attributeSpecs.Add(<#= attributeSpecType #>Converter.Convert(<#= spec #>.<#= attribute.AttributeName #>, <#= spec #>.Name));
			}
<#
			}
		}
#>
			<#= umlSpec #>.Attributes = MakeAttributeNamesUnique(attributeSpecs);
<#
	}
	
///==========================================================================================================================
/// Enumeration Literals
///==========================================================================================================================
					
	if (MetaModel.HasEnumerationLiterals(metaClassifier))
	{
#>

			var enumerationLiteralSpecs = new List<UmlEnumerationLiteralSpec>();
<#
		foreach (var enumerationLiteral in MetaModel.GetEnumerationLiteralsFor(metaClassifier))
		{
			var enumerationLiteralSpecType = enumerationLiteral.ClassName + "Spec";
			var enumerationLiteralSpec = enumerationLiteralSpecType.FirstCharToLowerCase();
			if (enumerationLiteral.Cardinality == MetaCardinality.Many)
			{
#>
			if (<#= spec #>.<#= enumerationLiteral.Name #> != null)
			{
				foreach (var <#= enumerationLiteralSpec #> in <#= spec #>.<#= enumerationLiteral.Name #>)
				{
					enumerationLiteralSpecs.Add(<#= enumerationLiteralSpecType #>Converter.Convert(<#= enumerationLiteralSpec #>));
				}
			}
<#
			}
			else
			{
#>
			if (<#= spec #>.<#= enumerationLiteral.Name #> != null)
			{
				enumerationLiteralSpecs.Add(<#= enumerationLiteralSpecType #>Converter.Convert(<#= spec #>.<#= enumerationLiteral.Name #>));
			}
<#
			}
#>
			<#= umlSpec #>.EnumerationLiterals = enumerationLiteralSpecs;
<#
		}
	}
	
///==========================================================================================================================
/// Associations
///==========================================================================================================================
					
	if (MetaModel.IsAssociatingClassifier(metaClassifier))
	{
#>

			var associationSpecs = new List<UmlAssociationSpec>();
<#
		foreach (var association in MetaModel.GetAssociationsForAssociatingClassifier(metaClassifier))
		{
			var associationSpecType = association.ClassName + "Spec";
			var associationSpec = associationSpecType.FirstCharToLowerCase();
			if (association.Cardinality == MetaCardinality.Many)
			{
#>
			if (<#= spec #>.<#= association.Name #> != null)
			{
				foreach (var <#= associationSpec #> in <#= spec #>.<#= association.Name #>)
				{
					associationSpecs.Add(<#= associationSpecType #>Converter.Convert(<#= associationSpec #>, <#= spec #>.Name));
				}
			}
<#
			}
			else
			{
#>
			if (<#= spec #>.<#= association.Name #> != null)
			{
				associationSpecs.Add(<#= associationSpecType #>Converter.Convert(<#= spec #>.<#= association.Name #>, <#= spec #>.Name));
			}
<#
			}
#>
			<#= umlSpec #>.Associations = MakeAssociationNamesUnique(associationSpecs);
<#
		}
	}
#>

			return <#= umlSpec #>;
		}

        private static IEnumerable<UmlAttributeSpec> MakeAttributeNamesUnique(List<UmlAttributeSpec> specs)
        {
            var specsByName = new Dictionary<string, List<UmlAttributeSpec>>();
            foreach (var spec in specs)
            {
                specsByName.GetAndCreate(spec.Name).Add(spec);
            }
            foreach (var specList in specsByName.Values)
            {
                if (specList.Count > 1)
                {
                    foreach (var spec in specList)
                    {
                        spec.Name = spec.Name + spec.Type.Name;
                    }
                }
            }
            return specs;
        }

        private static IEnumerable<UmlAssociationSpec> MakeAssociationNamesUnique(List<UmlAssociationSpec> specs)
        {
            var specsByName = new Dictionary<string, List<UmlAssociationSpec>>();
            foreach (var spec in specs)
            {
                specsByName.GetAndCreate(spec.Name).Add(spec);
            }
            foreach (var specList in specsByName.Values)
            {
                if (specList.Count > 1)
                {
                    foreach (var spec in specList)
                    {
                        spec.Name = spec.Name + spec.AssociatedClassifier.Name;
                    }
                }
            }
            return specs;
        }
	}
}
